---
- name: update packages
  apt:
    update_cache: yes

- name: install dependencies
  apt:
      name:
        - curl
        - apt-transport-https
        - gnupg
        - openjdk-{{ java_version }}-jdk
      state: present

- name: Add an Apt signing key, uses whichever key is at the URL
  ansible.builtin.apt_key:
      url: https://pkg.jenkins.io/debian-stable/jenkins.io.key
      state: present

- name: Add specified repository into sources list
  apt_repository:
    repo: 'deb http://pkg.jenkins.io/debian-stable binary/'
    state: present
    update_cache: yes
    
- name: install jenkins
  apt:
    name: jenkins
    state: present

- name: read admin pwd
  shell: cat /var/lib/jenkins/secrets/initialAdminPassword
  register: adminpwd

- name: unlock and add admin user
  jenkins_script:
    script: |
        import jenkins.model.*
        import hudson.security.*
        def instance = Jenkins.getInstance()
        def hudsonRealm = new HudsonPrivateSecurityRealm(false)
        hudsonRealm.createAccount('jenkins', '${user_pwd}')
        instance.setSecurityRealm(hudsonRealm)
        def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
        strategy.setAllowAnonymousRead(false)
        instance.setAuthorizationStrategy(strategy)
        instance.save()
    args:
      user_pwd: "{{ admin_user_pass }}"
    user: admin
    password: "{{ adminpwd.stdout }}"
    
- name: complete setup wizard
  jenkins_script:
    script: |
      import static jenkins.model.Jenkins.instance as jenkins
      import jenkins.install.InstallState
      if (!jenkins.installState.isSetupComplete()) {
        InstallState.INITIAL_SETUP_COMPLETED.initializeState()
        }
    user: admin
    password: "{{ adminpwd.stdout }}"

- name: JENKINS-CTEDENTIALS | Create CRUMB authentication request
  uri:
    url: 'http://localhost:{{ jenkins_port }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
    user: "{{ admin_user_pass }}"
    password: "{{ adminpwd.stdout }}"
    force_basic_auth: yes
    return_content: yes
  register: crumb
    
- name: JENKINS-CTEDENTIALS | Add Jenkins administration account
  uri:
    method: POST
    url: 'http://localhost:{{ jenkins_port }}/securityRealm/createAccountByAdmin'
    user: "{{ admin_user_pass}}"
    password: '{{ adminpwd.stdout }}'
    force_basic_auth: yes
    follow_redirects: all
    headers:
      Jenkins-Crumb: '{{ crumb.content.split(":")[1] }}'
      Cookie: '{{ crumb.set_cookie }}'
    body: 'username={{ jenkins_user }}&password1={{ jenkins_pass }}&password2={{ jenkins_pass }}&fullname={{ jenkins_fullname }}&email={{ jenkins_email }}'

- name: install plugin
  jenkins_plugin:
    name: "{{ item }}"
    state: latest
    url_username: admin
    url_password: "{{ adminpwd.stdout }}"
  with_items:
      - kubernetes
      - sonar
      - Artifactory
      - git
    
- name: systemd-reload
  systemd:
    daemon-reload: yes
    name: jenkins
    enabled: true

- name: restart Jenkins
  systemd:
    name: jenkins
    state: restarted
    daemon_reload: yes

- name: Sleep for 30 seconds and continue with play
  ansible.builtin.wait_for:
    timeout: 30
  delegate_to: localhost

- name: get public IP for Jenkins
  shell: wget -qO- http://ipecho.net/plain ; echo
  register: jenkinspublic_ip

- name: output 
  debug: msg="{{ jenkinspublic_ip.stdout }}"

- set_fact: jenkins_url="{{ jenkinspublic_ip.stdout }}"


- name: Download jenkins-cli jar
  ansible.builtin.get_url:
    url: http://{{ jenkins_url }}:8080/jnlpJars/jenkins-cli.jar
    dest: /home/ubuntu
    mode: '0440'

- name: Creating a xml file with content
  copy:
    dest: "/home/ubuntu/credential.xml"
    content: |
      <org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl> 
        <scope>GLOBAL</scope>
        <id>SonarToken</id>
        <secret>{{ sonar_token }}</secret> 
        <description>Sonar Token</description>
      </org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl> 

- name: Run command to set credential in secret
  shell: java -jar jenkins-cli.jar -auth {{jenkins_user}}:{{jenkins_pass}} -s http://{{jenkins_url}}:8080/ create-credentials-by-xml system::system::jenkins _  < credential.xml  


# - name: Sending an e-mail using Gmail SMTP servers
#   community.general.mail:
#     host: gator4041.hostgator.com
#     port: 465
#     username: abhilash.rl@cloudjournee.com
#     password: Cjptech@12
#     from: abhilash.rl@cloudjournee.com
#     to: nayab.s@cloudjournee.com
#     subject: jenkins_dashboard credentails
#     body: 'jenkins_dashboard_username="{{ jenkins_user }}"\njenkins_dashboard_password="{{ jenkins_pass }}"'
#   delegate_to: localhost


    


